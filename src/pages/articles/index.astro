---
import { getCollection, getEntry } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import PageHeader from '@/components/shared/PageHeader.astro';
import Icon from '@/components/ui/Icon.astro';
import CTA from '@/components/shared/CTA.astro';

// Get the page content
const page = await getEntry('pages', 'articles');
if (!page) {
  throw new Error('Articles page content not found');
}

// Get all articles and sort by most recent
const allArticles = await getCollection('articles');
const sortedArticles = allArticles.sort(
  (a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime()
);

// Function to format date
function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date);
}

// Get unique categories
const allCategories = [
  ...new Set(allArticles.flatMap((article) => article.data.categories || [])),
].sort();

// Get featured articles
const featuredArticles = sortedArticles.filter((article) => article.data.featured);

// Extract content from the page data
const { Content } = await page.render();
const {
  title,
  description,
  ogImage,
  ogType,
  twitterCard,
  metaRobots,
  keywords,
  author,
  articlesSection,
  hero,
  cta,
} = page.data;

// Default values if not provided in content
const sectionTitle = articlesSection?.title || 'Marketing Articles & Insights';
const sectionDescription =
  articlesSection?.description ||
  'Explore our collection of marketing articles, guides, and insights to help grow your business';
const featuredTitle = articlesSection?.featuredTitle || 'Featured Articles';
const featuredDescription =
  articlesSection?.featuredDescription || 'Our most popular and helpful resources';
const categoriesTitle = articlesSection?.categoriesTitle || 'Browse by Category';
const categories = articlesSection?.categories || [];
---

<MainLayout {title} {description} {ogImage} {ogType} {twitterCard} {metaRobots} {keywords} {author}>
  <PageHeader
    title={hero?.title || title}
    description={hero?.description || description}
    backgroundImage={hero?.backgroundImage}
  />

  <section class="bg-white py-16">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <!-- Featured Articles -->
      {
        featuredArticles.length > 0 && (
          <div class="mb-16">
            <h2 class="mb-4 text-2xl font-bold text-gray-900">{featuredTitle}</h2>
            <p class="mb-8 text-lg text-gray-600">{featuredDescription}</p>

            <div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
              {featuredArticles.map((article) => (
                <div class="overflow-hidden rounded-lg border border-yellow-200 bg-yellow-50 shadow-md transition duration-300 hover:shadow-lg">
                  <a href={`/articles/${article.slug}`} class="block">
                    <div class="relative h-48 w-full bg-gray-200">
                      {article.data.image ? (
                        <img
                          src={article.data.image}
                          alt={article.data.title}
                          class="h-full w-full object-cover"
                        />
                      ) : (
                        <div class="flex h-full w-full items-center justify-center bg-blue-50 text-blue-500">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-16 w-16"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="1"
                              d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
                            />
                          </svg>
                        </div>
                      )}
                      <span class="absolute top-0 left-0 bg-yellow-500 px-3 py-1 text-xs font-semibold text-white">
                        Featured
                      </span>
                    </div>
                    <div class="p-6">
                      <div class="mb-2 flex gap-2 text-sm text-blue-600">
                        {article.data.categories &&
                          article.data.categories.map((category) => <span>{category}</span>)}
                      </div>
                      <h2 class="mb-2 text-xl font-bold text-gray-900">{article.data.title}</h2>
                      <p class="mb-4 line-clamp-3 text-gray-600">{article.data.description}</p>
                      <div class="flex items-center justify-between">
                        <span class="text-sm text-gray-500">
                          {formatDate(article.data.publishDate)}
                        </span>
                        <span class="text-sm font-medium text-blue-600">Read More →</span>
                      </div>
                    </div>
                  </a>
                </div>
              ))}
            </div>
          </div>
        )
      }

      <!-- Latest Articles -->
      <div class="mb-16">
        <h2 class="mb-4 text-2xl font-bold text-gray-900">{sectionTitle}</h2>
        <p class="mb-8 text-lg text-gray-600">{sectionDescription}</p>

        <!-- Categories Filter -->
        <div class="mb-10">
          <h3 class="mb-4 text-xl font-bold text-gray-900">{categoriesTitle}</h3>
          <div class="flex flex-wrap items-center gap-2">
            <a
              href="/articles"
              class="rounded-full bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700"
              >All</a
            >
            {
              allCategories.map((category) => (
                <a
                  href={`/articles/category/${category.toLowerCase()}`}
                  class="rounded-full bg-gray-100 px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-200"
                >
                  {category}
                </a>
              ))
            }
          </div>
        </div>

        <!-- Category Cards (if defined in the content) -->
        {
          categories.length > 0 && (
            <div class="mb-10 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
              {categories.map((category) => (
                <a
                  href={`/articles/category/${category.name.toLowerCase()}`}
                  class="flex flex-col rounded-lg border border-gray-200 p-6 shadow-sm transition hover:border-blue-300 hover:shadow"
                >
                  {category.icon && (
                    <div class="mb-4">
                      <Icon name={category.icon} class="h-8 w-8 text-blue-500" />
                    </div>
                  )}
                  <h3 class="mb-2 text-lg font-bold text-gray-900">{category.name}</h3>
                  {category.description && <p class="text-gray-600">{category.description}</p>}
                </a>
              ))}
            </div>
          )
        }

        <!-- Articles List -->
        <div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
          {
            sortedArticles.map((article) => (
              <div class="overflow-hidden rounded-lg shadow-md transition duration-300 hover:shadow-lg">
                <a href={`/articles/${article.slug}`} class="block">
                  <div class="relative h-48 w-full bg-gray-200">
                    {article.data.image ? (
                      <img
                        src={article.data.image}
                        alt={article.data.title}
                        class="h-full w-full object-cover"
                      />
                    ) : (
                      <div class="flex h-full w-full items-center justify-center bg-blue-50 text-blue-500">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          class="h-16 w-16"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="1"
                            d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
                          />
                        </svg>
                      </div>
                    )}
                    {article.data.featured && (
                      <span class="absolute top-0 left-0 bg-yellow-500 px-3 py-1 text-xs font-semibold text-white">
                        Featured
                      </span>
                    )}
                  </div>
                  <div class="p-6">
                    <div class="mb-2 flex gap-2 text-sm text-blue-600">
                      {article.data.categories &&
                        article.data.categories.map((category) => <span>{category}</span>)}
                    </div>
                    <h2 class="mb-2 text-xl font-bold text-gray-900">{article.data.title}</h2>
                    <p class="mb-4 line-clamp-3 text-gray-600">{article.data.description}</p>
                    <div class="flex items-center justify-between">
                      <span class="text-sm text-gray-500">
                        {formatDate(article.data.publishDate)}
                      </span>
                      <span class="text-sm font-medium text-blue-600">Read More →</span>
                    </div>
                  </div>
                </a>
              </div>
            ))
          }
        </div>
      </div>

      <!-- Rendered markdown content -->
      <div class="prose prose-blue max-w-none">
        <Content />
      </div>
    </div>
  </section>

  <CTA content={page.data} />
</MainLayout>
